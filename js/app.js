// Generated by CoffeeScript 1.4.0

define(function(require) {
  var Singleton, _LazyLoad;
  _LazyLoad = (function() {

    _LazyLoad.prototype.VERSION = '0.1';

    function _LazyLoad(_global) {
      var get_this;
      this.isScrolling = false;
      this.global = _global;
      get_this = this;
      $(_global).scroll(function() {
        get_this.isScrolling = true;
        clearTimeout($.data(this, "scrollTimer"));
        return $.data(this, "scrollTimer", setTimeout(function() {
          return get_this.isScrolling = false;
        }, 350));
      });
      get_this = this;
      this.defer(_global, "MathJax", function() {
        var _MathJax, _defer;
        _defer = get_this.defer;
        _MathJax = _global.MathJax;
        return _defer(_MathJax, "Hub", function() {
          return _defer(_MathJax.Hub, "config", function() {
            return _defer(_MathJax.Hub.config, "lazytex2jax", function(lazytex2jax) {
              return _defer(_MathJax.Hub.config, "skipStartupTypeset", function(skipStartupTypeset) {
                if (skipStartupTypeset) {
                  get_this['lazytex2jax'] = lazytex2jax;
                  return get_this.bootstrap();
                }
              });
            });
          });
        });
      });
    }

    _LazyLoad.prototype.defer = function(parent_obj, waitfor, method) {
      if ((parent_obj != null ? parent_obj[waitfor] : void 0) != null) {
        method(parent_obj[waitfor]);
      } else {
        parent_obj.watch(waitfor, function(id, oldval, newval) {
          method(parent_obj[waitfor]);
          return newval;
        });
      }
    };

    _LazyLoad.prototype.escapeRegExp = function(str) {
      return str.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    };

    _LazyLoad.prototype.bootstrap = function() {
      var $, XRegExp, get_this, _;
      _ = require('underscore');
      $ = require('jquery');
      XRegExp = require('xregexp');
      get_this = this;
      return $(function() {
        var getTextNodesIn, lazy_watch_queue;
        getTextNodesIn = function(el) {
          return $(el).find(":not(iframe,script,img,canvas)").addBack().contents().filter(function() {
            return this.nodeType === 3;
          });
        };
        console.log($(getTextNodesIn('body')).size() + " text nodes");
        lazy_watch_queue = {};
        _.each(get_this.lazytex2jax, function(delimiter_pack, delimiter_pack_name) {
          return _.each(delimiter_pack, function(delimiter, index) {
            var end_delimiter, re, regex_string, start_delimiter;
            start_delimiter = get_this.escapeRegExp(delimiter[0]);
            end_delimiter = get_this.escapeRegExp(delimiter[1]);
            regex_string = start_delimiter + '(.*?)' + end_delimiter;
            re = new XRegExp.cache(regex_string, "sg");
            return $(getTextNodesIn('body')).each(function() {
              var a, lazy_element, name, new_text, replacementpattern, text;
              a = $(this);
              text = a.text();
              if (re.test(text)) {
                lazy_element = {};
                lazy_element.start_delimiter = delimiter[0];
                lazy_element.end_delimiter = delimiter[1];
                name = "" + delimiter_pack_name + "-" + index;
                lazy_watch_queue[name] = lazy_element;
                replacementpattern = "<lazymathjax name=\"lazy-load-mathjax-stamp-" + name + "\">$1</lazymathjax>";
                new_text = XRegExp.replace(text, re, replacementpattern);
                return a.replaceWith(new_text);
              }
            });
          });
        });
        get_this.watch_setup(lazy_watch_queue);
      });
    };

    _LazyLoad.prototype.isElementInViewport_old = function(el) {
      var height, left, top, width;
      top = el.offsetTop;
      left = el.offsetLeft;
      width = el.offsetWidth;
      height = el.offsetHeight;
      while (el.offsetParent) {
        el = el.offsetParent;
        top += el.offsetTop;
        left += el.offsetLeft;
      }
      return top >= this.global.pageYOffset && left >= this.global.pageXOffset && (top + height) <= (this.global.pageYOffset + this.global.innerHeight) && (left + width) <= (this.global.pageXOffset + this.global.innerWidth);
    };

    _LazyLoad.prototype.isElementInViewport = function(el) {
      var rect;
      rect = el.getBoundingClientRect();
      return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
    };

    _LazyLoad.prototype.watch_setup = function(lazy_watch_queue) {
      var $, get_this;
      $ = require('jquery');
      get_this = this;
      this.counter = 0;
      $(function() {
        _.each(lazy_watch_queue, function(delimiter_to_watch, name) {
          var qq;
          qq = $("lazymathjax[name='lazy-load-mathjax-stamp-" + name + "']");
          if (qq.size() > 0) {
            return qq.lazyloadanything({
              onLoad: function(e, LLobj) {
                var $element, defer;
                $element = LLobj.$element;
                defer = function() {
                  var anotherdefer, bool, end_delimiter, mathjax_input, start_delimiter;
                  bool = get_this.isElementInViewport($element.get(0));
                  if (!bool) {
                    LLobj.loaded = false;
                    return;
                  }
                  if (!get_this.isScrolling && bool) {
                    bool = get_this.isElementInViewport($element.get(0));
                    if (!bool) {
                      LLobj.loaded = false;
                      return;
                    }
                    start_delimiter = delimiter_to_watch.start_delimiter;
                    end_delimiter = delimiter_to_watch.end_delimiter;
                    mathjax_input = $("<mathjax>").html(start_delimiter + $element.text() + end_delimiter);
                    anotherdefer = function() {
                      var END_STEP, QUEUE;
                      if (get_this.counter < 5) {
                        get_this.counter++;
                        QUEUE = MathJax.Hub.queue;
                        END_STEP = function() {
                          $element.replaceWith(mathjax_input.get(0));
                          if (get_this.counter > 0) {
                            get_this.counter--;
                          }
                          return $element.remove();
                        };
                        QUEUE.Push(["Typeset", MathJax.Hub, mathjax_input.get(0)], END_STEP);
                      } else {
                        setTimeout(function() {
                          return anotherdefer();
                        }, 100);
                      }
                    };
                    anotherdefer();
                  } else {
                    setTimeout(function() {
                      return defer();
                    }, 500);
                  }
                };
                defer();
              }
            });
          }
        });
        $.fn.lazyloadanything('load');
      });
    };

    return _LazyLoad;

  })();
  Singleton = (function() {
    var instance;

    function Singleton() {}

    instance = null;

    Singleton.get = function(global) {
      if (instance == null) {
        instance = new _LazyLoad(global);
      }
    };

    return Singleton;

  })();
  return Singleton;
});
