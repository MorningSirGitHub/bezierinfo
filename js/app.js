// Generated by CoffeeScript 1.6.3
define(function(require) {
  var Singleton, _LazyLoad;
  _LazyLoad = (function() {
    _LazyLoad.prototype.VERSION = '0.1';

    function _LazyLoad(window) {
      var async, get_this, _watch;
      this.window = window;
      get_this = this;
      _watch = get_this.watchproperty;
      _watch(window, "MathJax", function() {
        var _MathJax;
        _MathJax = window.MathJax;
        return _watch(_MathJax, "Hub", function() {
          return _watch(_MathJax.Hub, "config", function() {
            return _watch(_MathJax.Hub.config, "lazytex2jax", function(lazytex2jax) {
              return _watch(_MathJax.Hub.config, "skipStartupTypeset", function(skipStartupTypeset) {
                var _;
                if (skipStartupTypeset === true) {
                  get_this['lazytex2jax'] = lazytex2jax;
                  _ = require('lodash');
                  _.defer(function(f, _this) {
                    return f.call(_this);
                  }, get_this.bootstrap, get_this);
                }
              });
            });
          });
        });
      });
      async = require('async');
      return;
    }

    _LazyLoad.prototype.bootstrap = function() {
      var $, XRegExp, get_this, _, _stopRender;
      _ = require('lodash');
      $ = require('jquery');
      XRegExp = require('xregexp');
      get_this = this;
      this.stopRender = false;
      _stopRender = this.stopRender;
      $(function() {
        var getTextNodesIn, lazy_watch_queue, _escapeRegExp;
        getTextNodesIn = function(el) {
          return $(el).find(":not(iframe,script,img,canvas)").addBack().contents().filter(function() {
            return this.nodeType === 3;
          });
        };
        _escapeRegExp = get_this.escapeRegExp;
        lazy_watch_queue = {};
        _.each(get_this.lazytex2jax, function(delimiter_pack, delimiter_pack_name) {
          _.each(delimiter_pack, function(delimiter, index) {
            var end_delimiter, re, regex_string, start_delimiter;
            start_delimiter = _escapeRegExp(delimiter[0]);
            end_delimiter = _escapeRegExp(delimiter[1]);
            regex_string = start_delimiter + '(.*?)' + end_delimiter;
            re = new XRegExp.cache(regex_string, "sg");
            $(getTextNodesIn('body')).each(function() {
              var $text, $this, lazy_element, name, new_text, replacementpattern;
              $this = $(this);
              $text = $this.text();
              if (re.test($text)) {
                lazy_element = {};
                lazy_element.start_delimiter = delimiter[0];
                lazy_element.end_delimiter = delimiter[1];
                name = "" + delimiter_pack_name + "-" + index;
                lazy_element.selector = "lazymathjax[name='lazy-load-mathjax-stamp-" + name + "']";
                lazy_watch_queue[name] = lazy_element;
                replacementpattern = "<lazymathjax name=\"lazy-load-mathjax-stamp-" + name + "\">$1</lazymathjax>";
                new_text = XRegExp.replace($text, re, replacementpattern);
                $this.replaceWith(new_text);
              }
            });
          });
        });
        get_this.init_renderMathJax();
        $(get_this.window).on("scroll.lmjx resize.lmjx", function() {
          _stopRender = true;
          clearTimeout($.data(this, "lmjxeventTimer"));
          return $.data(this, "lmjxeventTimer", setTimeout(function() {
            var _isElementInViewport;
            _stopRender = false;
            _isElementInViewport = get_this.isElementInViewport;
            return _.each(lazy_watch_queue, function(delimiter_to_watch, name) {
              var $elems, _renderMathJax;
              $elems = $(delimiter_to_watch.selector);
              if ($elems.size() > 0) {
                _renderMathJax = get_this.renderMathJax;
                return $elems.each(function() {
                  var render_package;
                  if (_stopRender === false && _isElementInViewport($(this).get(0)) === true) {
                    render_package = {
                      elem: this,
                      start_delimiter: delimiter_to_watch.start_delimiter,
                      end_delimiter: delimiter_to_watch.end_delimiter
                    };
                    return _renderMathJax.call(get_this, render_package);
                  }
                });
              }
            });
          }, 500));
        });
        return $(get_this.window).trigger('scroll.lmjx');
      });
    };

    _LazyLoad.prototype.init_renderMathJax = function() {
      var async, worker, _;
      async = require('async');
      _ = require('lodash');
      if (this.queue == null) {
        worker = function(_work, callback) {
          var _args, _f, _this;
          _f = _work['f'];
          _this = _work['_this'];
          _args = _work['_args'] || [];
          _args.push(callback);
          return _.defer(function(f, _this, _args) {
            return f.apply(_this, _args);
          }, _f, _this, _args);
        };
        this.queue = async.queue(worker, 5);
      }
      if (this.MathJaxQueue == null) {
        this.MathJaxQueue = this.window.MathJax.Hub.queue;
      }
    };

    _LazyLoad.prototype.renderMathJax = function(render_package) {
      var $, render_process, work_package, _queue;
      _queue = this.queue;
      $ = require('jquery');
      render_process = function(render_package, callback) {
        var $element, $newelement, QUEUE, end_delimiter, some_callback, start_delimiter;
        if (this.isElementInViewport(render_package.elem) === false) {
          return callback(true);
        }
        if (this.stopRender === true) {
          return callback(true);
        }
        $element = $(render_package.elem);
        start_delimiter = render_package.start_delimiter;
        end_delimiter = render_package.end_delimiter;
        $newelement = $("<mathjax>").html(start_delimiter + $element.text() + end_delimiter);
        $element.replaceWith($newelement.get(0));
        $element.remove();
        QUEUE = this.MathJaxQueue;
        some_callback = function() {
          return callback();
        };
        QUEUE.Push(["Typeset", MathJax.Hub, $newelement.get(0), callback]);
      };
      work_package = {
        f: render_process,
        _this: this,
        _args: [render_package]
      };
      _queue.push(work_package, function(cancelled) {});
    };

    _LazyLoad.prototype.watchproperty = function(parent_obj, property, callback) {
      if ((parent_obj != null ? parent_obj[property] : void 0) != null) {
        callback(parent_obj[property]);
      } else {
        parent_obj.watch(property, function(id, oldval, newval) {
          callback(parent_obj[property]);
          return newval;
        });
      }
    };

    _LazyLoad.prototype.isElementInViewport = function(el) {
      var contains, docEl, eap, efp, has, rect, vHeight, vWidth;
      rect = el.getBoundingClientRect();
      docEl = document.documentElement;
      vWidth = this.window.innerWidth || docEl.clientWidth;
      vHeight = this.window.innerHeight || docEl.clientHeight;
      efp = function(x, y) {
        return document.elementFromPoint(x, y);
      };
      contains = ("contains" in el ? "contains" : "compareDocumentPosition");
      has = (contains === "contains" ? 1 : 0x10);
      if (rect.right < 0 || rect.bottom < 0 || rect.left > vWidth || rect.top > vHeight) {
        return false;
      }
      return (eap = efp(rect.left, rect.top)) === el || el[contains](eap) === has || (eap = efp(rect.right, rect.top)) === el || el[contains](eap) === has || (eap = efp(rect.right, rect.bottom)) === el || el[contains](eap) === has || (eap = efp(rect.left, rect.bottom)) === el || el[contains](eap) === has;
    };

    _LazyLoad.prototype.isElementInViewport_old = function(el) {
      var rect;
      rect = el.getBoundingClientRect();
      return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (this.window.innerHeight || document.documentElement.clientHeight) && rect.right <= (this.window.innerWidth || document.documentElement.clientWidth);
    };

    _LazyLoad.prototype.escapeRegExp = function(str) {
      return str.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    };

    return _LazyLoad;

  })();
  Singleton = (function() {
    var instance;

    function Singleton() {}

    instance = null;

    Singleton.get = function(window) {
      if (instance == null) {
        instance = new _LazyLoad(window);
      }
    };

    return Singleton;

  })();
  return Singleton;
});
